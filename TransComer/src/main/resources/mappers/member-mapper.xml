<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<!-- 회원 관련 -->
	<resultMap type="Member" id="memberResultSet">
         <id property="memberNo" column="MEMBER_NO"/>
         <result property="memberId" column="MEMBER_ID"/>
         <result property="memberPw" column="MEMBER_PW"/>
         <result property="memberName" column="MEMBER_NAME"/>
         <result property="email" column="MEMBER_EMAIL"/>
         <result property="address" column="MEMBER_ADDRESS"/>
         <result property="phone" column="MEMBER_PHONE"/>
         <result property="point" column="MEMBER_POINT"/>
         <result property="account" column="ACCOUNT_INFO"/>
         <result property="status" column="MEMBER_STATUS"/>
         <result property="contentCount" column="CONTENTS_COUNT"/>
         <result property="adoptCount" column="ADOPT_COUNT"/>
         <result property="enrollDate" column="MEMBER_ENROLL_DATE"/>
         <result property="profileStatus" column="PROFILE_STATUS"/>
   </resultMap>
   
   <!-- 로그인 -->
	<select id="selectMemberLogin" resultMap="memberResultSet" parameterType="Member"> 
	SELECT * FROM MEMBER WHERE MEMBER_ID = #{memberId} AND MEMBER_PW = #{memberPw} 
	</select>
	
   <!-- 회원 전체 리스트 -->
     <select id="selectMemberList" parameterType="Member" resultMap="memberResultSet">
      SELECT * FROM MEMBER
   </select>
   
   <!-- 회원 전체 인원수  -->
   <select id="getMemberListCount" resultType="_int">
   	SELECT COUNT(*) FROM MEMBER 
   </select>
   
   <!-- 회원정보 수정 -->
   	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER
		SET MEMBER_PW = #{memberPw}, MEMBER_EMAIL = #{email}, MEMBER_PHONE = #{phone}, MEMBER_ADDRESS = #{address}, ACCOUNT_INFO = #{account}
		<!-- UPDATE_DATE = SYSDATE -->
		WHERE MEMBER_ID = #{memberId }
	</update>
	
   
   <!-- 회원 검색별 전체 인원수  -->
   <select id="getMemberSearchListCount" parameterType="MemberSearch" resultType="_int">
	SELECT COUNT(*) FROM MEMBER   
		<where>
		<choose>
			<when test="memberSearchCondition =='status'">
			MEMBER_STATUS LIKE '%' || #{memberSearchValue} || '%'
			</when>
			<when test="memberSearchCondition =='memberId'">
			AND MEMBER_ID LIKE '%' || #{memberSearchValue} || '%'
			</when>
			<when test="memberSearchCondition=='name'">
			AND MEMBER_NAME LIKE '%' || #{memberSearchValue} || '%'  			
			</when>
		</choose>
	</where>	
   </select>
   
   <!-- 회원 검색 -->
   <select id="searchMemberList" parameterType="MemberSearch" resultMap="memberResultSet">
   SELECT * FROM MEMBER
   	<where>
		<choose>
			<when test="memberSearchCondition =='status'">
			MEMBER_STATUS LIKE '%' || #{memberSearchValue} || '%'
			</when>
			<when test="memberSearchCondition =='memberId'">
			AND MEMBER_ID LIKE '%' || #{memberSearchValue} || '%'
			</when>
			<when test="memberSearchCondition =='name'">
			AND MEMBER_NAME LIKE '%' || #{memberSearchValue} || '%'  			
			</when>
		</choose>
	</where>	
	ORDER BY MEMBER_NO DESC
   </select>
   
   	<!-- 프리미엄 가입 (업데이트) -->
   	<update id="memberUpdatePremium" parameterType="Member">
   	UPDATE MEMBER SET MEMBER_STATUS=#{status} WHERE MEMBER_ID=#{memberId}
   	</update>
   	
   	 	<!-- 프리미엄  해제(업데이트) -->
   	<update id="memberUpdatePrimary" parameterType="Member">
   	UPDATE MEMBER SET MEMBER_STATUS = 'PRIMARY'
	WHERE CEIL(SYSDATE - MEMBER_ENROLL_DATE) = 30 AND MEMBER_STATUS = 'PREMIUM';
   	</update>
   
   <!-- 회원 한명 선택 -->
   <select id="selectMemberOne" parameterType="Member" resultMap="memberResultSet">
   SELECT * FROM MEMBER WHERE MEMBER_ID=#{memberId}
   </select>
   
   <!-- <resultMap type="String" id="testMap">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="memberId" column="MEMBER_ID" />
	</resultMap> -->


	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES(MEM_NO_SEQ.NEXTVAL, #{memberId}, #{memberPw}, #{memberName},
		#{email}, #{address}, #{phone}, 0, #{account},
		default, default, default, SYSDATE, default)
	</insert>

	<!-- 아이디찾기 -->
	<select id="findId" parameterType="String" resultType="String">
		SELECT
		MEMBER_ID
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{email}
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="findPwd" parameterType="hashMap" resultType="_int">
		SELECT
		COUNT(*)
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId} AND MEMBER_PHONE = #{phone}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePwd" parameterType="hashMap">
		UPDATE MEMBER
		SET MEMBER_PW
		= #{pass}
		WHERE MEMBER_ID = #{userId}
	</update>
	
 <!-- 아이디 중복 체크 -->
	<select id="checkId" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM MEMBER WHERE MEMBER_ID = #{memberId}
	</select>
	
	<!-- 결제 api -->
	<update id="payMents" parameterType="hashmap"> 
	UPDATE MEMBER SET MEMBER_POINT = MEMBER_POINT + #{amount} WHERE MEMBER_ID = #{userId} 
	</update>

	<select id="userRefrash" parameterType="String" resultMap="memberResultSet">
	 SELECT * FROM MEMBER WHERE MEMBER_ID = #{memberId}
	  </select>
	
	<!-- 번역공유 게시판 열람 횟수 차감 -->
	<update id="updateContentCount" parameterType="String">
		UPDATE MEMBER
		SET CONTENTS_COUNT = CONTENTS_COUNT-1
		WHERE MEMBER_ID = #{memberId}
	</update>
	

<!-- 포인트 변동 관련 -->
   <resultMap type="PointChange" id="pointChangeResultSet">
   <id property="pointNo" column="POINT_NO"/>
   <result property="memberId" column="MEMBER_ID"/>
   <result property="pointUpdateDate" column="POINT_UPDATE_DATE"/>
   <result property="pointAmount" column="POINT_AMOUNT"/>
   <result property="pointContent" column="POINT_CONTENT"/>
   <result property="pointStatus" column="POINT_STATUS"/>
   </resultMap>
   
   
      
      <!-- 포인트 변동 리스트 회원별-->
   <select id="selectMemberPointChangeList" parameterType="PointChange" resultMap="pointChangeResultSet">
   SELECT * FROM POINT_HISTORIES WHERE MEMBER_ID=#{memberId} ORDER BY POINT_NO DESC
   </select>
   
   <!-- 포인트 차감(결제)포인트 변동 추가 -->
	<insert id="insertPointChange"  parameterType="PointChange">
	INSERT INTO POINT_HISTORIES VALUES(POINT_NO_SEQ.NEXTVAL,SYSDATE,#{pointAmount},#{pointContent},#{pointStatus},#{memberId})
	</insert>
   
  <!-- 회원 포인트 업데이트 -->
	<update id="updateMemberPoint" parameterType="Member">
	UPDATE MEMBER SET MEMBER_POINT=#{point} WHERE MEMBER_ID=#{memberId}
	</update>
	
	
   
      <!-- 포인트 변동내역 회원 전체 개수  -->
   <select id="getPointChangeMemberListCount" resultType="_int">
   	SELECT COUNT(*) FROM POINT_HISTORIES 
   </select>
   
      <!-- 포인트 변동내역 회원 별 전체 개수  -->
   <select id="getPointChangeListCount" resultType="_int">
   	SELECT COUNT(*) FROM POINT_HISTORIES  WHERE MEMBER_ID=#{memberId}
   </select>
   
   <!-- 포인트 변동 리스트 전체-->
   <select id="selecPointChangeList" parameterType="PointChange" resultMap="pointChangeResultSet">
   SELECT * FROM POINT_HISTORIES 
   </select>
   


	<!-- 포인트 환급 관련 -->
   <resultMap type="PointRefund" id="pointRefundResultSet">
	   <id property="refundNo" column="REFUND_NO"/>
	   <result property="refundPoint" column="REFUND_POINT"/>
	   <result property="memberId" column="MEMBER_ID"/>
	   <result property="refundYn" column="REFUND_YN"/>
	   <result property="accountInfo" column="ACCOUNT_INFO"/>
	   <result property="refundRequestDate" column="REFUND_REQUEST_DATE"/>
	   <result property="refundCompleteDate" column="REFUND_COMPLETE_DATE"/>
   </resultMap>
   
   <!-- 포인트 환급 전체리스트 -->
   <select id="selectPointRefundList" parameterType="PointRefund" resultMap="pointRefundResultSet">
   SELECT * FROM POINT_RETURN
   </select>
   
   <!-- 포인트 환급 내역 한개 확인 -->
   <select id="selectPointRefundOne" parameterType="PointRefund" resultMap="pointRefundResultSet">
   	SELECT * FROM POINT_RETURN WHERE REFUND_NO=#{refundNo}
   </select>
   
   <!-- 포인트 환급 상태별 목록 -->
   <select id="selectPointRefundCheck">
   SELECT * FROM POINT_RETURN WHERE REFUND_YN=#{refundYn}
   </select>
   
   <!-- 포인트 환급 여부 수정 -->
   <update id="pointRefundUpdate">
	UPDATE POINT_RETURN SET REFUND_YN=#{refundYn},REFUND_COMPLETE_DATE=SYSDATE WHERE REFUND_NO=#{refundNo}
   </update>
   
   <!-- 포인트 환급 신청 추가 -->
   <insert id="pointRefundInsert">
   	INSERT INTO POINT_RETURN VALUES(POINT_REF_NO_SEQ.NEXTVAL,#{refundPoint},DEFAULT,#{accountInfo},#{memberId},SYSDATE,null)
   </insert>
   
   <!-- 포인트 환급 신청 갯수 확인하는 쿼리 -->
	<select id="getPointRefundListCount" resultType="_int">
	SELECT COUNT(*) FROM POINT_RETURN
	</select>
	
	
	
   <!-- 프로필 관련 쿼리 -->
   <resultMap type="Profile" id="profileResultSet">
   		<id property="profileNo" column="PROFILE_NO" />
   		<result property="memberNo" column="MEMBER_NO" />
   		<result property="pLang1" column="P_LANGUAGE1" />
   		<result property="pLang2" column="P_LANGUAGE2" />
   		<result property="pLang3" column="P_LANGUAGE3" />
   		<result property="pLangGrade1" column="P_LANG_GRADE1" />
   		<result property="pLangGrade2" column="P_LANG_GRADE2" />
   		<result property="pLangGrade3" column="P_LANG_GRADE3" />
   		<result property="tLang1" column="T_LANGUAGE1" />
   		<result property="tLang2" column="T_LANGUAGE2" />
   		<result property="tLang3" column="T_LANGUAGE3" />
   		<result property="tLangGrade1" column="T_LANG_GRADE1" />
   		<result property="tLangGrade2" column="T_LANG_GRADE2" />
   		<result property="tLangGrade3" column="T_LANG_GRADE3" />
   		<result property="introduce" column="MEM_INTRODUCE" />
   		<result property="profileFilePath" column="PROFILE_FILE_PATH" />
   		<result property="profileDate" column="PROFILE_DATE" />
   		<result property="profileStatus" column="PROFILE_STATUS" />
   </resultMap>
   
   <select id="selectProfileList" resultMap="profileResultSet">
   		SELECT * FROM PROFILE ORDER BY PROFILE_NO DESC
   </select>
   
   <select id="selectProfileOne" parameterType="_int" resultMap="profileResultSet">
   		SELECT * FROM PROFILE WHERE MEMBER_NO = #{memberNo}
   </select>
   
   <insert id="insertProfile" parameterType="Profile">
   		INSERT INTO PROFILE VALUES(PRO_NO_SEQ.NEXTVAL, #{memberNo}, #{pLang1}, #{pLangGrade1}, #{pLang2}, 
   		#{pLangGrade2}, #{pLang3}, #{pLangGrade3}, #{tLang1}, #{tLangGrade1}, #{tLang2}, 
   		#{tLangGrade2}, #{tLang3}, #{tLangGrade3}, #{introduce}, #{profileFilePath}, SYSDATE, DEFAULT)
   </insert>
   
         <!-- 프로필 수정하기 -->
   <update id="updateProfile" parameterType="Profile">
   		UPDATE PROFILE SET P_LANGUAGE1 = #{pLang1}, P_LANG_GRADE1 = #{pLangGrade1}, P_LANGUAGE2 = #{pLang2}, 
   		P_LANG_GRADE2 =#{pLangGrade2}, P_LANGUAGE3 = #{pLang3}, P_LANG_GRADE3 = #{pLangGrade3}, T_LANGUAGE1 = #{tLang1}, 
   		T_LANG_GRADE1 = #{tLangGrade1}, T_LANGUAGE2 = #{tLang2}, T_LANG_GRADE2 = #{tLangGrade2}, T_LANGUAGE3 = #{tLang3},
   		T_LANG_GRADE3 =  #{tLangGrade3}, MEM_INTRODUCE = #{introduce}, PROFILE_FILE_PATH = #{profileFilePath},
   		PROFILE_DATE = SYSDATE, PROFILE_STATUS = #{profileStatus} WHERE MEMBER_NO = #{memberNo}
   </update>
   
   <!-- 프로필 삭제하기 -->
   <delete id="deleteProfile" parameterType = "_int">
   		DELETE FROM PROFILE WHERE MEMBER_NO = #{memberNo}
   </delete>
   
   <!-- 프로필 등록상태 Y 수정 -->
   <update id="updateStatusY" parameterType="Member">
   		UPDATE MEMBER SET PROFILE_STATUS = 'Y' WHERE MEMBER_NO = #{memberNo}
   </update>
   
   <!-- 프로필 등록상태 N 수정 -->
   <update id="updateStatusN" parameterType="Member">
   		UPDATE MEMBER SET PROFILE_STATUS = 'N' WHERE MEMBER_NO = #{memberNo}
   </update>
   
   <select id="getPfListCount" resultType="_int">
   		SELECT COUNT(*) FROM PROFILE
   </select>
   
   <select id="getPfSearchListCount" parameterType="Profile" resultType="_int">
	SELECT COUNT(*) FROM PROFILE
	<where>
		<choose>
			<when test="searchCondition =='id'">
			MEMBER_ID LIKE '%' || #{searchValue} || '%'
			</when>
			<when test="searchCondition =='no'">
			AND MEMBER_NO LIKE '%' || #{searchValue} || '%'
			</when>
			<when test="searchCondition=='status'">
			AND PROFILE_STATUS LIKE '%' || #{searchValue} || '%'  			
			</when>
			<otherwise>
			 AND (MEMBER_ID LIKE '%' || #{searchValue} || '%'
				OR MEMBER_NO LIKE '%' || #{searchValue} ||  '%'
				OR PROFILE_STATUS LIKE '%' || #{searchValue} || '%')
			</otherwise>
		</choose>
	</where>
	</select>
	
	<!-- 프로필 검색 쿼리 -->
	<select id="searchProfile" parameterType="Profile" resultMap="profileResultSet">
	SELECT * FROM PROFILE
	<where>
		<choose>
			<when test="searchCondition =='id'">
			MEMBER_ID LIKE '%' || #{searchValue} || '%'
			</when>
			<when test="searchCondition =='no'">
			AND MEMBER_NO LIKE '%' || #{searchValue} || '%'
			</when>
			<when test="searchCondition=='status'">
			AND PROFILE_STATUS LIKE '%' || #{searchValue} || '%'  			
			</when>
			<otherwise>
			 AND (MEMBER_ID LIKE '%' || #{searchValue} || '%'
				OR MEMBER_NO LIKE '%' || #{searchValue} ||  '%'
				OR PROFILE_STATUS LIKE '%' || #{searchValue} || '%')
			</otherwise>
		</choose>
	</where>	
	ORDER BY PROFILE_NO DESC	
	</select>
   
   
   </mapper>
